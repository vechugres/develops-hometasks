---
- name: Install packeges all other
  apt:
    pkg:
    - gnupg
    state: present
    update_cache: yes


- name: Install key for repo
  apt_key:
    url: https://pkg.jenkins.io/debian/jenkins.io.key
    state: present

- name: Add repo to repofile
  apt_repository:
    repo: deb https://pkg.jenkins.io/debian-stable binary/
    state: present
    update_cache: yes


- name: Install packeges all other
  apt:
    pkg:
    - git
    - build-essential
    - openjdk-11-jdk-headless
    - python3-pip
    - jq
    state: present
    update_cache: yes

- name: install jeninks
  apt:
    name: jenkins
    state: latest
    update_cache: yes    

- name: Install Payton
  pip:
    name:
    - python-jenkins
    - lxml



- name: Disable start wizard
  lineinfile:
    path: "{{ item.path }}"
    state: present
    regexp: "{{ item.exp }}"
    line: "{{ item.n_ln }}"
  with_items:
    - { path: "/lib/systemd/system/jenkins.service", exp: '^Environment="JAVA_OPTS=-Djava.awt.headless=true"', n_ln: 'Environment="JAVA_OPTS=-Djava.awt.headless=true -Djenkins.install.runSetupWizard=false"' }
    - { path: "/etc/default/jenkins", exp: '^JAVA_ARGS="-Djava.awt.headless=true"', n_ln: 'JAVA_ARGS="-Djava.awt.headless=true -Djenkins.install.runSetupWizard=false"' }

- name: Copy admin_user
  copy:
    src: users/
    dest: /var/lib/jenkins/users
    owner: jenkins
    group: jenkins

- name: Copy templates
  template:
    src: "{{ item }}"
    dest: /var/lib/jenkins
    owner: jenkins
    group: jenkins
  loop:
  - 'config.xml'
  - 'jenkins.model.JenkinsLocationConfiguration.xml'
  - 'org.jenkinsci.plugins.golang.GolangBuildWrapper.xml'
  - 'org.jvnet.hudson.plugins.SSHBuildWrapper.xml'

#- name: restart Jenkins
#  systemd:
#    name: jenkins
#    state: restarted
#    daemon_reload: yes

- name: Start Jenkins
  sysvinit:
    name: jenkins
    state: started
    enabled: yes


- name: Install plugins
  jenkins_plugin:
    name: "{{ item }}"
    state: present
    timeout: 500
    with_dependencies: yes
    url_username: "{{ jenkins_user }}"
    url_password: "{{ jenkins_password }}"
  register: plugin_results
  until: plugin_results is success
  retries: 5
  delay: 10
  loop:
  - credentials-binding
  - credentials
  - plain-credentials
  - git
  - github
  - github-branch-source
  - golang
  - pipeline
  - pipeline-stage-view
  - pipeline-github-lib
  - workflow-cps
  - workflow-aggregator
  - workflow-durable-task-step
  - pipeline-utility-steps
  - pipeline-stage-view
  - ssh-steps
  - pipeline-stage-step
  - github-branch-source
  - ssh
  - ssh-credentials
  - sshd
  - ssh-slaves
  - nexus-artifact-uploader
  - timestamper

- name: restart jenkins
  service:
    name: jenkins
    state: restarted


- name: create job
  jenkins_job:
    config: "{{ lookup('template', 'job-config-2.xml.j2') }}"
    name: GoBuild
    user: "{{ jenkins_user }}"
    password: "{{ jenkins_password }}"


- name: Add credentials
  command: |
    curl -X POST "http://{{ jenkins_ip }}:8080/credentials/store/system/domain/_/createCredentials" \
      --user "{{ jenkins_user }}":"{{ jenkins_password }}" --data-urlencode 'json={
        "": "0", 
        "credentials": { 
        "scope": "GLOBAL", 
        "id": "{{ item.id }}-creds", 
        "username": "{{ item.user }}", 
        "password": "{{ item.password }}", 
        "description": "{{ item.id }}-creds", 
        "stapler-class": "com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl" 
      }
    }'
  register: creds_out
  ignore_errors: yes
  loop:
  - {id: "vagrant", user: "vagrant", password: "vagrant"}
  - {id: "nexus", user: "{{ nexus_user_uploader }}", password: "{{ nexus_user_uploader }}"}
  - {id: "nexus-read", user: "{{ nexus_user_downloader }}", password: "{{ nexus_user_downloader }}"}

 # uri:
 #   url: "http://{{ jenkins_ip }}:8080/credentials/store/system/domain/_/createCredentials"
 #   method: POST
 #   force_basic_auth: yes
 #   user: "{{ jenkins_user }}"
 #   password: "{{ jenkins_password }}"
 #   body_format: json
 #   headers:
 #     Accept: application/json
 #     Content-Type: application/json
 #   body:
