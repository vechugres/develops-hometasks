---
#JENKINS
- name: instal and configure jenkins
  hosts: jenkins
  become: true
  tasks:
#jenkins vars
    - include_vars: inventory/vars.yml
#os preparation
    - name: apt update
      shell: apt update

    #- name: upgrade the OS
    #  apt:
    #    upgrade: dist

    - name: install  pkg's
      apt:
        pkg:
        - git
        - build-essential
        - default-jre
        - python3-pip
        - sshpass
        - jq
        state: latest
#add jenkins's repo and install jenkins
    - name: ensure the jenkins apt repository key is installed
      apt_key:
        url: https://pkg.jenkins.io/debian-stable/jenkins.io.key
        state: present

    - name: ensure the repository is configured
      apt_repository:
        repo: deb https://pkg.jenkins.io/debian-stable binary/
        state: present

    - name: install jenkins
      apt:
        name: jenkins
        state: latest
#jenkins gonfiguration
    - name: install python
      pip:
        name:
          - python-jenkins
          - lxml

    - name: jenkins needs to rest
      service:
        name: jenkins
        state: stopped

    - name: mkdir users and jobs
      file:
        path: "{{ item }}"
        state: directory
        group: jenkins
        owner: jenkins
        mode: '0755'
      with_items:
        - /var/lib/jenkins/users/jadmin_7909463358859378454
        - /var/lib/jenkins/jobs/mygobuild

    - name: Copy config files
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        group: jenkins
        owner: jenkins
        mode: '0755'
        force: true
      with_items:
        - { src: '/vagrant/inventory/jenkins/jobs/mygobuild/config.xml', dest: '/var/lib/jenkins/jobs/mygobuild/config.xml' }
        - { src: '/vagrant/inventory/jenkins/users/jadmin_7909463358859378454/config.xml', dest: '/var/lib/jenkins/users/jadmin_7909463358859378454/config.xml' }
        - { src: '/vagrant/inventory/jenkins/users/users.xml', dest: '/var/lib/jenkins/users/users.xml' }
        - { src: '/vagrant/inventory/jenkins/config.xml', dest: '/var/lib/jenkins/config.xml' }
        - { src: '/vagrant/inventory/jenkins/org.jenkinsci.plugins.golang.GolangBuildWrapper.xml', dest: '/var/lib/jenkins/' }

    - name: disable wizard
      lineinfile:
         path: "{{ item.path }}"
         state: present
         regexp: "{{ item.exp }}"
         line: "{{ item.n_ln }}"
      with_items:
        - { path: "/lib/systemd/system/jenkins.service", exp: '^Environment="JAVA_OPTS=-Djava.awt.headless=true"', n_ln: 'Environment="JAVA_OPTS=-Djava.awt.headless=true -Djenkins.install.runSetupWizard=false"' }
        - { path: "/etc/default/jenkins", exp: '^JAVA_ARGS="-Djava.awt.headless=true"', n_ln: 'JAVA_ARGS="-Djava.awt.headless=true -Djenkins.install.runSetupWizard=false"' }

    - name: reload systemd
      systemd:
        daemon_reload: true

    - name: enabled jenkins
      service:
        name: jenkins
        state: started
        enabled: true

    - name: install plugins
      jenkins_plugin:
        name: "{{ item }}"
        url_username: "{{ jenkins_user }}"
        url_password: "{{ jenkins_passw }}"
        url: "{{ jenkins_url }}"
        with_dependencies: true
      with_items:
        - timestamper
        - git
        - github
        - golang
        - Pipeline
        - nexus-artifact-uploader
        - ssh

    - name: restarted jenkins
      service:
        name: jenkins
        state: restarted
#do first build
    - name: make build
      community.general.jenkins_build:
        name: "mygobuild"
        build_number: 1
        state: present
        user: "{{ jenkins_user }}"
        password: "{{ jenkins_passw }}"
        url: "{{ jenkins_url }}"
      tags: build

  tags: jenkins

#SLAVES
- hosts: slaves
  become: true
  tasks:
    - name: make service wordcloud.service
      community.general.ini_file:
        path: /etc/systemd/system/wordcloud.service
        section: "{{ item.section }}"
        option: "{{ item.option }}"
        value: "{{ item.value }}"
        mode: '0600'
      loop:
      - { section: 'Unit', option: 'Description', value: 'Word Cloud Generator' }
      - { section: 'Service', option: 'WorkingDirectory', value: '/opt/wordcloud' }
      - { section: 'Service', option: 'ExecStart', value: '/opt/wordcloud/word-cloud-generator' }
      - { section: 'Service', option: 'Restart', value: 'always' }
      - { section: 'Install',option: 'WantedBy', value: 'multi-user.target' }

    - name: mkdir /opt/wordcloud
      ansible.builtin.file:
        path: '/opt/wordcloud'
        state: directory
        owner: 'vagrant'
        group: 'vagrant'
        mode: '0755'

    - name: enable nexus service
      systemd:
        name: wordcloud.service
        enabled: true

  tags: slaves

#NEXUS
- name: install Nexus
  hosts: nexus
  become: true
  tasks:
    - name: add key java 8 for drbian 11
      apt_key:
        url: https://adoptopenjdk.jfrog.io/adoptopenjdk/api/gpg/key/public
    - apt_repository:
        repo: deb https://adoptopenjdk.jfrog.io/adoptopenjdk/deb/ bullseye main
        state: present
        update_cache: true

    - name: Install OpenJDK 8
      apt:
        name: adoptopenjdk-8-hotspot-jre
        state: present

    - name: ensure group nexus exists
      group:
        name: nexus
        state: present

    - name: create nexus user
      user:
        name: nexus
        group: nexus

    - name: download Nexus
      get_url:
        url: https://download.sonatype.com/nexus/3/nexus-3.38.1-01-unix.tar.gz
        checksum: md5:d3d2e8ebef0816f412b66fe7a374f923
        dest: /opt/nexus3.tar.gz

    - name: create workdir
      file:
        path: /opt/nexus
        state: directory

    - name: extract
      ansible.builtin.unarchive:
        src: "https://download.sonatype.com/nexus/3/nexus-3.38.1-01-unix.tar.gz"
        dest: '/opt/'
        remote_src: true

    - name: copy environment file
      copy:
        src: inventory/nexus/nexus-server
        dest: /etc/default/nexus-server

    - name: copy systemd file
      copy:
        src: inventory/nexus/nexus.service
        dest: /etc/systemd/system/nexus.service

    - name: reload systemd
      ansible.builtin.systemd:
        daemon_reload: true

    - name: start Nexus service
      systemd:
        name: nexus
        enabled: true
        state: started

  tags: nexus
